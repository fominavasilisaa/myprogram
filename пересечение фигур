#include <iostream>
#include <cmath>

using namespace std;

struct Point {
	double x;
	double y;
};

struct Circle {
	Point center;
	int rad;
};

struct Square {
	Point leftPoint;
	int len;
};

void circlesCross(Circle circle1, Circle circle2) {
	double lenght = sqrt(pow(circle1.center.x - circle2.center.x, 2) +
		pow(circle1.center.y - circle2.center.y, 2));

	if (lenght <= circle1.rad + circle2.rad) {
		cout << "Круги пересекаются" << endl;
	}
	else {
		cout << "Круги не пересекаются" << endl;
	}
}

void squaresCross(Square square1, Square square2) {
	int leftSide1 = square1.leftPoint.x;
	int rightSide1 = square1.leftPoint.x + square1.len;
	int upSide1 = square1.leftPoint.y;
	int downSide1 = square1.leftPoint.y - square1.len;

	int leftSide2 = square2.leftPoint.x;
	int rightSide2 = square2.leftPoint.x + square2.len;
	int upSide2 = square2.leftPoint.y;
	int downSide2 = square2.leftPoint.y - square2.len;

	if (leftSide1 <= rightSide2 && rightSide1 >= leftSide2 &&
		upSide1 >= downSide2 && downSide1 <= upSide2) {
		cout << "Квадраты пересекаются" << endl;
	}
	else {
		cout << "Квадраты не пересекаются" << endl;
	}
}

void circleSquareCross(Circle circle, Square square) {
    int leftSide = square.leftPoint.x;
    int rightSide = square.leftPoint.x + square.len; 
    int upSide = square.leftPoint.y;
    int downSide = square.leftPoint.y - square.len; 

    int closestX, closestY;

    if (circle.center.x < leftSide) {
        closestX = leftSide;
    }
    else if (circle.center.x > rightSide) {
        closestX = rightSide;
    }
    else {
        closestX = circle.center.x;
    }

    if (circle.center.y > upSide) {
        closestY = upSide;
    }
    else if (circle.center.y < downSide) {
        closestY = downSide;
    }
    else {
        closestY = circle.center.y;
    }

    double lenght = sqrt(pow(circle.center.x - closestX, 2) +
        pow(circle.center.y - closestY, 2));

    if (lenght <= circle.rad) {
        cout << "Круг и квадрат пересекаются" << endl;
    }
    else {
        cout << "Круг и квадрат не пересекаются" << endl;
    }
}

void readPoint(Point& point) {
    cout << "       Введите x: ";
    cin >> point.x;
    cout << "       Введите y: ";
    cin >> point.y;
}

void readCircle(Circle& circle) {
    cout << "   Введите центр круга: " << endl;
    readPoint(circle.center);
    cout << "   Введите радиус круга: ";
    cin >> circle.rad;
}

void readSquare(Square& square) {
    cout << "   Введите левый верхний угол квадрата: " << endl;
    readPoint(square.leftPoint);
    cout << "   Введите длину стороны квадрата: ";
    cin >> square.len;
}

int main() {
    Circle circle1, circle2;
    Square square1, square2;

    cout << "Круг 1: " << endl;
    readCircle(circle1);

    cout << "Круг 2: " << endl;
    readCircle(circle2);

    cout << "Квадрат 1: " << endl;
    readSquare(square1);

    cout << "Квадрат 2: " << endl;
    readSquare(square2);

    circlesCross(circle1, circle2);
    squaresCross(square1, square2);
    circleSquareCross(circle1, square1);
    circleSquareCross(circle1, square2);
    circleSquareCross(circle2, square1);
    circleSquareCross(circle2, square2);

    return 0;
}
